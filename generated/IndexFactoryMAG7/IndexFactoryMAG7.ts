// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Issuanced extends ethereum.Event {
  get params(): Issuanced__Params {
    return new Issuanced__Params(this);
  }
}

export class Issuanced__Params {
  _event: Issuanced;

  constructor(event: Issuanced) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class IssuanceCancelled extends ethereum.Event {
  get params(): IssuanceCancelled__Params {
    return new IssuanceCancelled__Params(this);
  }
}

export class IssuanceCancelled__Params {
  _event: IssuanceCancelled;

  constructor(event: IssuanceCancelled) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RequestIssuance extends ethereum.Event {
  get params(): RequestIssuance__Params {
    return new RequestIssuance__Params(this);
  }
}

export class RequestIssuance__Params {
  _event: RequestIssuance;

  constructor(event: RequestIssuance) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RequestCancelIssuance extends ethereum.Event {
  get params(): RequestCancelIssuance__Params {
    return new RequestCancelIssuance__Params(this);
  }
}

export class RequestCancelIssuance__Params {
  _event: RequestCancelIssuance;

  constructor(event: RequestCancelIssuance) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get inputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RequestRedemption extends ethereum.Event {
  get params(): RequestRedemption__Params {
    return new RequestRedemption__Params(this);
  }
}

export class RequestRedemption__Params {
  _event: RequestRedemption;

  constructor(event: RequestRedemption) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RedemptionCancelled extends ethereum.Event {
  get params(): RedemptionCancelled__Params {
    return new RedemptionCancelled__Params(this);
  }
}

export class RedemptionCancelled__Params {
  _event: RedemptionCancelled;

  constructor(event: RedemptionCancelled) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RequestCancelRedemption extends ethereum.Event {
  get params(): RequestCancelRedemption__Params {
    return new RequestCancelRedemption__Params(this);
  }
}

export class RequestCancelRedemption__Params {
  _event: RequestCancelRedemption;

  constructor(event: RequestCancelRedemption) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outputToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IndexFactoryMAG7__actionInfoByIdResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getActionType(): BigInt {
    return this.value0;
  }

  getNonce(): BigInt {
    return this.value1;
  }
}

export class IndexFactoryMAG7__getOrderInstanceByIdResultValue0Struct extends ethereum.Tuple {
  get requestTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get assetToken(): Address {
    return this[2].toAddress();
  }

  get paymentToken(): Address {
    return this[3].toAddress();
  }

  get sell(): boolean {
    return this[4].toBoolean();
  }

  get orderType(): i32 {
    return this[5].toI32();
  }

  get assetTokenQuantity(): BigInt {
    return this[6].toBigInt();
  }

  get paymentTokenQuantity(): BigInt {
    return this[7].toBigInt();
  }

  get price(): BigInt {
    return this[8].toBigInt();
  }

  get tif(): i32 {
    return this[9].toI32();
  }
}

export class IndexFactoryMAG7__orderInstanceByIdResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: boolean;
  value5: i32;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: boolean,
    value5: i32,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5)),
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9)),
    );
    return map;
  }

  getRequestTimestamp(): BigInt {
    return this.value0;
  }

  getRecipient(): Address {
    return this.value1;
  }

  getAssetToken(): Address {
    return this.value2;
  }

  getPaymentToken(): Address {
    return this.value3;
  }

  getSell(): boolean {
    return this.value4;
  }

  getOrderType(): i32 {
    return this.value5;
  }

  getAssetTokenQuantity(): BigInt {
    return this.value6;
  }

  getPaymentTokenQuantity(): BigInt {
    return this.value7;
  }

  getPrice(): BigInt {
    return this.value8;
  }

  getTif(): i32 {
    return this.value9;
  }
}

export class IndexFactoryMAG7 extends ethereum.SmartContract {
  static bind(address: Address): IndexFactoryMAG7 {
    return new IndexFactoryMAG7("IndexFactoryMAG7", address);
  }

  actionInfoById(param0: BigInt): IndexFactoryMAG7__actionInfoByIdResult {
    let result = super.call(
      "actionInfoById",
      "actionInfoById(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new IndexFactoryMAG7__actionInfoByIdResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_actionInfoById(
    param0: BigInt,
  ): ethereum.CallResult<IndexFactoryMAG7__actionInfoByIdResult> {
    let result = super.tryCall(
      "actionInfoById",
      "actionInfoById(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IndexFactoryMAG7__actionInfoByIdResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  burnedTokenAmountByNonce(param0: BigInt): BigInt {
    let result = super.call(
      "burnedTokenAmountByNonce",
      "burnedTokenAmountByNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_burnedTokenAmountByNonce(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnedTokenAmountByNonce",
      "burnedTokenAmountByNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyRequestPayedAmountById(param0: BigInt): BigInt {
    let result = super.call(
      "buyRequestPayedAmountById",
      "buyRequestPayedAmountById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_buyRequestPayedAmountById(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyRequestPayedAmountById",
      "buyRequestPayedAmountById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateBuyRequestFee(_amount: BigInt): BigInt {
    let result = super.call(
      "calculateBuyRequestFee",
      "calculateBuyRequestFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)],
    );

    return result[0].toBigInt();
  }

  try_calculateBuyRequestFee(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateBuyRequestFee",
      "calculateBuyRequestFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateIssuanceFee(_inputAmount: BigInt): BigInt {
    let result = super.call(
      "calculateIssuanceFee",
      "calculateIssuanceFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_inputAmount)],
    );

    return result[0].toBigInt();
  }

  try_calculateIssuanceFee(_inputAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateIssuanceFee",
      "calculateIssuanceFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_inputAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelIssuanceComplted(param0: BigInt): boolean {
    let result = super.call(
      "cancelIssuanceComplted",
      "cancelIssuanceComplted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBoolean();
  }

  try_cancelIssuanceComplted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelIssuanceComplted",
      "cancelIssuanceComplted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancelIssuanceRequestId(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "cancelIssuanceRequestId",
      "cancelIssuanceRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_cancelIssuanceRequestId(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cancelIssuanceRequestId",
      "cancelIssuanceRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelRedemptionComplted(param0: BigInt): boolean {
    let result = super.call(
      "cancelRedemptionComplted",
      "cancelRedemptionComplted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBoolean();
  }

  try_cancelRedemptionComplted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelRedemptionComplted",
      "cancelRedemptionComplted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancelRedemptionRequestId(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "cancelRedemptionRequestId",
      "cancelRedemptionRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_cancelRedemptionRequestId(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cancelRedemptionRequestId",
      "cancelRedemptionRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkMultical(_reqeustId: BigInt): boolean {
    let result = super.call("checkMultical", "checkMultical(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_reqeustId),
    ]);

    return result[0].toBoolean();
  }

  try_checkMultical(_reqeustId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkMultical",
      "checkMultical(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_reqeustId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  coaByIssuanceNonce(param0: BigInt): Address {
    let result = super.call(
      "coaByIssuanceNonce",
      "coaByIssuanceNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_coaByIssuanceNonce(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coaByIssuanceNonce",
      "coaByIssuanceNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coaByRedemptionNonce(param0: BigInt): Address {
    let result = super.call(
      "coaByRedemptionNonce",
      "coaByRedemptionNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_coaByRedemptionNonce(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coaByRedemptionNonce",
      "coaByRedemptionNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factoryStorage(): Address {
    let result = super.call("factoryStorage", "factoryStorage():(address)", []);

    return result[0].toAddress();
  }

  try_factoryStorage(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryStorage",
      "factoryStorage():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRate(): i32 {
    let result = super.call("feeRate", "feeRate():(uint8)", []);

    return result[0].toI32();
  }

  try_feeRate(): ethereum.CallResult<i32> {
    let result = super.tryCall("feeRate", "feeRate():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getActionType(_requestId: BigInt): BigInt {
    let result = super.call(
      "getActionType",
      "getActionType(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)],
    );

    return result[0].toBigInt();
  }

  try_getActionType(_requestId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActionType",
      "getActionType(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIssuanceAmountOut(_amount: BigInt): BigInt {
    let result = super.call(
      "getIssuanceAmountOut",
      "getIssuanceAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)],
    );

    return result[0].toBigInt();
  }

  try_getIssuanceAmountOut(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIssuanceAmountOut",
      "getIssuanceAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderInstanceById(
    id: BigInt,
  ): IndexFactoryMAG7__getOrderInstanceByIdResultValue0Struct {
    let result = super.call(
      "getOrderInstanceById",
      "getOrderInstanceById(uint256):((uint64,address,address,address,bool,uint8,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return changetype<IndexFactoryMAG7__getOrderInstanceByIdResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getOrderInstanceById(
    id: BigInt,
  ): ethereum.CallResult<IndexFactoryMAG7__getOrderInstanceByIdResultValue0Struct> {
    let result = super.tryCall(
      "getOrderInstanceById",
      "getOrderInstanceById(uint256):((uint64,address,address,address,bool,uint8,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IndexFactoryMAG7__getOrderInstanceByIdResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getPortfolioValue(): BigInt {
    let result = super.call(
      "getPortfolioValue",
      "getPortfolioValue():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getPortfolioValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPortfolioValue",
      "getPortfolioValue():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionAmountOut(_amount: BigInt): BigInt {
    let result = super.call(
      "getRedemptionAmountOut",
      "getRedemptionAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionAmountOut(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionAmountOut",
      "getRedemptionAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultDshareBalance(_token: Address): BigInt {
    let result = super.call(
      "getVaultDshareBalance",
      "getVaultDshareBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getVaultDshareBalance(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultDshareBalance",
      "getVaultDshareBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultDshareValue(_token: Address): BigInt {
    let result = super.call(
      "getVaultDshareValue",
      "getVaultDshareValue(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getVaultDshareValue(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultDshareValue",
      "getVaultDshareValue(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMainnet(): boolean {
    let result = super.call("isMainnet", "isMainnet():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMainnet(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMainnet", "isMainnet():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuanceIndexTokenPrimaryTotalSupply(param0: BigInt): BigInt {
    let result = super.call(
      "issuanceIndexTokenPrimaryTotalSupply",
      "issuanceIndexTokenPrimaryTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_issuanceIndexTokenPrimaryTotalSupply(
    param0: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuanceIndexTokenPrimaryTotalSupply",
      "issuanceIndexTokenPrimaryTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuanceIndexTokens(_inputAmount: BigInt): BigInt {
    let result = super.call(
      "issuanceIndexTokens",
      "issuanceIndexTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_inputAmount)],
    );

    return result[0].toBigInt();
  }

  try_issuanceIndexTokens(_inputAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuanceIndexTokens",
      "issuanceIndexTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_inputAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuanceInputAmount(param0: BigInt): BigInt {
    let result = super.call(
      "issuanceInputAmount",
      "issuanceInputAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_issuanceInputAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuanceInputAmount",
      "issuanceInputAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuanceIsCompleted(param0: BigInt): boolean {
    let result = super.call(
      "issuanceIsCompleted",
      "issuanceIsCompleted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBoolean();
  }

  try_issuanceIsCompleted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "issuanceIsCompleted",
      "issuanceIsCompleted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuanceNonce(): BigInt {
    let result = super.call("issuanceNonce", "issuanceNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_issuanceNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuanceNonce",
      "issuanceNonce():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuanceRequestId(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "issuanceRequestId",
      "issuanceRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_issuanceRequestId(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuanceRequestId",
      "issuanceRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuanceRequesterByNonce(param0: BigInt): Address {
    let result = super.call(
      "issuanceRequesterByNonce",
      "issuanceRequesterByNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_issuanceRequesterByNonce(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "issuanceRequesterByNonce",
      "issuanceRequesterByNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  issuanceTokenPrimaryBalance(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "issuanceTokenPrimaryBalance",
      "issuanceTokenPrimaryBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_issuanceTokenPrimaryBalance(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuanceTokenPrimaryBalance",
      "issuanceTokenPrimaryBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuer(): Address {
    let result = super.call("issuer", "issuer():(address)", []);

    return result[0].toAddress();
  }

  try_issuer(): ethereum.CallResult<Address> {
    let result = super.tryCall("issuer", "issuer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  latestFeeUpdate(): BigInt {
    let result = super.call(
      "latestFeeUpdate",
      "latestFeeUpdate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestFeeUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestFeeUpdate",
      "latestFeeUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderInstanceById(param0: BigInt): IndexFactoryMAG7__orderInstanceByIdResult {
    let result = super.call(
      "orderInstanceById",
      "orderInstanceById(uint256):(uint64,address,address,address,bool,uint8,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new IndexFactoryMAG7__orderInstanceByIdResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBoolean(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toI32(),
    );
  }

  try_orderInstanceById(
    param0: BigInt,
  ): ethereum.CallResult<IndexFactoryMAG7__orderInstanceByIdResult> {
    let result = super.tryCall(
      "orderInstanceById",
      "orderInstanceById(uint256):(uint64,address,address,address,bool,uint8,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IndexFactoryMAG7__orderInstanceByIdResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBoolean(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toI32(),
      ),
    );
  }

  orderManager(): Address {
    let result = super.call("orderManager", "orderManager():(address)", []);

    return result[0].toAddress();
  }

  try_orderManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("orderManager", "orderManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  portfolioValueByNonce(param0: BigInt): BigInt {
    let result = super.call(
      "portfolioValueByNonce",
      "portfolioValueByNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_portfolioValueByNonce(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "portfolioValueByNonce",
      "portfolioValueByNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceInWei(_tokenAddress: Address): BigInt {
    let result = super.call("priceInWei", "priceInWei(address):(uint256)", [
      ethereum.Value.fromAddress(_tokenAddress),
    ]);

    return result[0].toBigInt();
  }

  try_priceInWei(_tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceInWei", "priceInWei(address):(uint256)", [
      ethereum.Value.fromAddress(_tokenAddress),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemption(_inputAmount: BigInt): BigInt {
    let result = super.call("redemption", "redemption(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_inputAmount),
    ]);

    return result[0].toBigInt();
  }

  try_redemption(_inputAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redemption", "redemption(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_inputAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionIndexTokenPrimaryTotalSupply(param0: BigInt): BigInt {
    let result = super.call(
      "redemptionIndexTokenPrimaryTotalSupply",
      "redemptionIndexTokenPrimaryTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_redemptionIndexTokenPrimaryTotalSupply(
    param0: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionIndexTokenPrimaryTotalSupply",
      "redemptionIndexTokenPrimaryTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionInputAmount(param0: BigInt): BigInt {
    let result = super.call(
      "redemptionInputAmount",
      "redemptionInputAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_redemptionInputAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionInputAmount",
      "redemptionInputAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionIsCompleted(param0: BigInt): boolean {
    let result = super.call(
      "redemptionIsCompleted",
      "redemptionIsCompleted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBoolean();
  }

  try_redemptionIsCompleted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "redemptionIsCompleted",
      "redemptionIsCompleted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redemptionNonce(): BigInt {
    let result = super.call(
      "redemptionNonce",
      "redemptionNonce():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_redemptionNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionNonce",
      "redemptionNonce():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionRequestId(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "redemptionRequestId",
      "redemptionRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_redemptionRequestId(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionRequestId",
      "redemptionRequestId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionRequesterByNonce(param0: BigInt): Address {
    let result = super.call(
      "redemptionRequesterByNonce",
      "redemptionRequesterByNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_redemptionRequesterByNonce(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "redemptionRequesterByNonce",
      "redemptionRequesterByNonce(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redemptionTokenPrimaryBalance(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "redemptionTokenPrimaryBalance",
      "redemptionTokenPrimaryBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_redemptionTokenPrimaryBalance(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionTokenPrimaryBalance",
      "redemptionTokenPrimaryBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellRequestAssetAmountById(param0: BigInt): BigInt {
    let result = super.call(
      "sellRequestAssetAmountById",
      "sellRequestAssetAmountById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_sellRequestAssetAmountById(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellRequestAssetAmountById",
      "sellRequestAssetAmountById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setIndexFactoryStorage(_factoryStorage: Address): boolean {
    let result = super.call(
      "setIndexFactoryStorage",
      "setIndexFactoryStorage(address):(bool)",
      [ethereum.Value.fromAddress(_factoryStorage)],
    );

    return result[0].toBoolean();
  }

  try_setIndexFactoryStorage(
    _factoryStorage: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setIndexFactoryStorage",
      "setIndexFactoryStorage(address):(bool)",
      [ethereum.Value.fromAddress(_factoryStorage)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setIssuer(_issuer: Address): boolean {
    let result = super.call("setIssuer", "setIssuer(address):(bool)", [
      ethereum.Value.fromAddress(_issuer),
    ]);

    return result[0].toBoolean();
  }

  try_setIssuer(_issuer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("setIssuer", "setIssuer(address):(bool)", [
      ethereum.Value.fromAddress(_issuer),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setTokenAddress(_token: Address): boolean {
    let result = super.call(
      "setTokenAddress",
      "setTokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBoolean();
  }

  try_setTokenAddress(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setTokenAddress",
      "setTokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setUsdcAddress(_usdc: Address, _usdcDecimals: i32): boolean {
    let result = super.call(
      "setUsdcAddress",
      "setUsdcAddress(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_usdc),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_usdcDecimals)),
      ],
    );

    return result[0].toBoolean();
  }

  try_setUsdcAddress(
    _usdc: Address,
    _usdcDecimals: i32,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setUsdcAddress",
      "setUsdcAddress(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_usdc),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_usdcDecimals)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenShortagePercentByNonce(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "tokenShortagePercentByNonce",
      "tokenShortagePercentByNonce(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenShortagePercentByNonce(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenShortagePercentByNonce",
      "tokenShortagePercentByNonce(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenValueByNonce(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "tokenValueByNonce",
      "tokenValueByNonce(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenValueByNonce(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenValueByNonce",
      "tokenValueByNonce(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShortagePercentByNonce(param0: BigInt): BigInt {
    let result = super.call(
      "totalShortagePercentByNonce",
      "totalShortagePercentByNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_totalShortagePercentByNonce(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalShortagePercentByNonce",
      "totalShortagePercentByNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdcDecimals(): i32 {
    let result = super.call("usdcDecimals", "usdcDecimals():(uint8)", []);

    return result[0].toI32();
  }

  try_usdcDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("usdcDecimals", "usdcDecimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CancelIssuanceCall extends ethereum.Call {
  get inputs(): CancelIssuanceCall__Inputs {
    return new CancelIssuanceCall__Inputs(this);
  }

  get outputs(): CancelIssuanceCall__Outputs {
    return new CancelIssuanceCall__Outputs(this);
  }
}

export class CancelIssuanceCall__Inputs {
  _call: CancelIssuanceCall;

  constructor(call: CancelIssuanceCall) {
    this._call = call;
  }

  get _issuanceNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelIssuanceCall__Outputs {
  _call: CancelIssuanceCall;

  constructor(call: CancelIssuanceCall) {
    this._call = call;
  }
}

export class CancelRedemptionCall extends ethereum.Call {
  get inputs(): CancelRedemptionCall__Inputs {
    return new CancelRedemptionCall__Inputs(this);
  }

  get outputs(): CancelRedemptionCall__Outputs {
    return new CancelRedemptionCall__Outputs(this);
  }
}

export class CancelRedemptionCall__Inputs {
  _call: CancelRedemptionCall;

  constructor(call: CancelRedemptionCall) {
    this._call = call;
  }

  get _redemptionNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelRedemptionCall__Outputs {
  _call: CancelRedemptionCall;

  constructor(call: CancelRedemptionCall) {
    this._call = call;
  }
}

export class CompleteCancelIssuanceCall extends ethereum.Call {
  get inputs(): CompleteCancelIssuanceCall__Inputs {
    return new CompleteCancelIssuanceCall__Inputs(this);
  }

  get outputs(): CompleteCancelIssuanceCall__Outputs {
    return new CompleteCancelIssuanceCall__Outputs(this);
  }
}

export class CompleteCancelIssuanceCall__Inputs {
  _call: CompleteCancelIssuanceCall;

  constructor(call: CompleteCancelIssuanceCall) {
    this._call = call;
  }

  get _issuanceNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteCancelIssuanceCall__Outputs {
  _call: CompleteCancelIssuanceCall;

  constructor(call: CompleteCancelIssuanceCall) {
    this._call = call;
  }
}

export class CompleteCancelRedemptionCall extends ethereum.Call {
  get inputs(): CompleteCancelRedemptionCall__Inputs {
    return new CompleteCancelRedemptionCall__Inputs(this);
  }

  get outputs(): CompleteCancelRedemptionCall__Outputs {
    return new CompleteCancelRedemptionCall__Outputs(this);
  }
}

export class CompleteCancelRedemptionCall__Inputs {
  _call: CompleteCancelRedemptionCall;

  constructor(call: CompleteCancelRedemptionCall) {
    this._call = call;
  }

  get _redemptionNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteCancelRedemptionCall__Outputs {
  _call: CompleteCancelRedemptionCall;

  constructor(call: CompleteCancelRedemptionCall) {
    this._call = call;
  }
}

export class CompleteIssuanceCall extends ethereum.Call {
  get inputs(): CompleteIssuanceCall__Inputs {
    return new CompleteIssuanceCall__Inputs(this);
  }

  get outputs(): CompleteIssuanceCall__Outputs {
    return new CompleteIssuanceCall__Outputs(this);
  }
}

export class CompleteIssuanceCall__Inputs {
  _call: CompleteIssuanceCall;

  constructor(call: CompleteIssuanceCall) {
    this._call = call;
  }

  get _issuanceNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteIssuanceCall__Outputs {
  _call: CompleteIssuanceCall;

  constructor(call: CompleteIssuanceCall) {
    this._call = call;
  }
}

export class CompleteRedemptionCall extends ethereum.Call {
  get inputs(): CompleteRedemptionCall__Inputs {
    return new CompleteRedemptionCall__Inputs(this);
  }

  get outputs(): CompleteRedemptionCall__Outputs {
    return new CompleteRedemptionCall__Outputs(this);
  }
}

export class CompleteRedemptionCall__Inputs {
  _call: CompleteRedemptionCall;

  constructor(call: CompleteRedemptionCall) {
    this._call = call;
  }

  get _redemptionNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteRedemptionCall__Outputs {
  _call: CompleteRedemptionCall;

  constructor(call: CompleteRedemptionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _factoryStorage(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _issuer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _usdcDecimals(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _isMainnet(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IssuanceIndexTokensCall extends ethereum.Call {
  get inputs(): IssuanceIndexTokensCall__Inputs {
    return new IssuanceIndexTokensCall__Inputs(this);
  }

  get outputs(): IssuanceIndexTokensCall__Outputs {
    return new IssuanceIndexTokensCall__Outputs(this);
  }
}

export class IssuanceIndexTokensCall__Inputs {
  _call: IssuanceIndexTokensCall;

  constructor(call: IssuanceIndexTokensCall) {
    this._call = call;
  }

  get _inputAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IssuanceIndexTokensCall__Outputs {
  _call: IssuanceIndexTokensCall;

  constructor(call: IssuanceIndexTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MockCompleteIssuanceCall extends ethereum.Call {
  get inputs(): MockCompleteIssuanceCall__Inputs {
    return new MockCompleteIssuanceCall__Inputs(this);
  }

  get outputs(): MockCompleteIssuanceCall__Outputs {
    return new MockCompleteIssuanceCall__Outputs(this);
  }
}

export class MockCompleteIssuanceCall__Inputs {
  _call: MockCompleteIssuanceCall;

  constructor(call: MockCompleteIssuanceCall) {
    this._call = call;
  }

  get _issuanceNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MockCompleteIssuanceCall__Outputs {
  _call: MockCompleteIssuanceCall;

  constructor(call: MockCompleteIssuanceCall) {
    this._call = call;
  }
}

export class MockCompleteRedemptionCall extends ethereum.Call {
  get inputs(): MockCompleteRedemptionCall__Inputs {
    return new MockCompleteRedemptionCall__Inputs(this);
  }

  get outputs(): MockCompleteRedemptionCall__Outputs {
    return new MockCompleteRedemptionCall__Outputs(this);
  }
}

export class MockCompleteRedemptionCall__Inputs {
  _call: MockCompleteRedemptionCall;

  constructor(call: MockCompleteRedemptionCall) {
    this._call = call;
  }

  get _redemptionNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MockCompleteRedemptionCall__Outputs {
  _call: MockCompleteRedemptionCall;

  constructor(call: MockCompleteRedemptionCall) {
    this._call = call;
  }
}

export class MulticalCall extends ethereum.Call {
  get inputs(): MulticalCall__Inputs {
    return new MulticalCall__Inputs(this);
  }

  get outputs(): MulticalCall__Outputs {
    return new MulticalCall__Outputs(this);
  }
}

export class MulticalCall__Inputs {
  _call: MulticalCall;

  constructor(call: MulticalCall) {
    this._call = call;
  }

  get _requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MulticalCall__Outputs {
  _call: MulticalCall;

  constructor(call: MulticalCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RedemptionCall extends ethereum.Call {
  get inputs(): RedemptionCall__Inputs {
    return new RedemptionCall__Inputs(this);
  }

  get outputs(): RedemptionCall__Outputs {
    return new RedemptionCall__Outputs(this);
  }
}

export class RedemptionCall__Inputs {
  _call: RedemptionCall;

  constructor(call: RedemptionCall) {
    this._call = call;
  }

  get _inputAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedemptionCall__Outputs {
  _call: RedemptionCall;

  constructor(call: RedemptionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeRateCall extends ethereum.Call {
  get inputs(): SetFeeRateCall__Inputs {
    return new SetFeeRateCall__Inputs(this);
  }

  get outputs(): SetFeeRateCall__Outputs {
    return new SetFeeRateCall__Outputs(this);
  }
}

export class SetFeeRateCall__Inputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }

  get _newFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeeRateCall__Outputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }
}

export class SetIndexFactoryStorageCall extends ethereum.Call {
  get inputs(): SetIndexFactoryStorageCall__Inputs {
    return new SetIndexFactoryStorageCall__Inputs(this);
  }

  get outputs(): SetIndexFactoryStorageCall__Outputs {
    return new SetIndexFactoryStorageCall__Outputs(this);
  }
}

export class SetIndexFactoryStorageCall__Inputs {
  _call: SetIndexFactoryStorageCall;

  constructor(call: SetIndexFactoryStorageCall) {
    this._call = call;
  }

  get _factoryStorage(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIndexFactoryStorageCall__Outputs {
  _call: SetIndexFactoryStorageCall;

  constructor(call: SetIndexFactoryStorageCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetIssuerCall extends ethereum.Call {
  get inputs(): SetIssuerCall__Inputs {
    return new SetIssuerCall__Inputs(this);
  }

  get outputs(): SetIssuerCall__Outputs {
    return new SetIssuerCall__Outputs(this);
  }
}

export class SetIssuerCall__Inputs {
  _call: SetIssuerCall;

  constructor(call: SetIssuerCall) {
    this._call = call;
  }

  get _issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIssuerCall__Outputs {
  _call: SetIssuerCall;

  constructor(call: SetIssuerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetTokenAddressCall extends ethereum.Call {
  get inputs(): SetTokenAddressCall__Inputs {
    return new SetTokenAddressCall__Inputs(this);
  }

  get outputs(): SetTokenAddressCall__Outputs {
    return new SetTokenAddressCall__Outputs(this);
  }
}

export class SetTokenAddressCall__Inputs {
  _call: SetTokenAddressCall;

  constructor(call: SetTokenAddressCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenAddressCall__Outputs {
  _call: SetTokenAddressCall;

  constructor(call: SetTokenAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetUsdcAddressCall extends ethereum.Call {
  get inputs(): SetUsdcAddressCall__Inputs {
    return new SetUsdcAddressCall__Inputs(this);
  }

  get outputs(): SetUsdcAddressCall__Outputs {
    return new SetUsdcAddressCall__Outputs(this);
  }
}

export class SetUsdcAddressCall__Inputs {
  _call: SetUsdcAddressCall;

  constructor(call: SetUsdcAddressCall) {
    this._call = call;
  }

  get _usdc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdcDecimals(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetUsdcAddressCall__Outputs {
  _call: SetUsdcAddressCall;

  constructor(call: SetUsdcAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
