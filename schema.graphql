type ChainlinkCancelled @entity(immutable: true) {
  id: Bytes!
  IndexFactory_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChainlinkFulfilled @entity(immutable: true) {
  id: Bytes!
  IndexFactory_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChainlinkRequested @entity(immutable: true) {
  id: Bytes!
  IndexFactory_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeRateSet @entity(immutable: true) {
  id: Bytes!
  feeRatePerDayScaled: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeReceiverSet @entity(immutable: true) {
  id: Bytes!
  feeReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIIssuanced @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MethodologistSet @entity(immutable: true) {
  id: Bytes!
  methodologist: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MethodologySet @entity(immutable: true) {
  id: Bytes!
  methodology: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintFeeToReceiver @entity(immutable: true) {
  id: Bytes!
  feeReceiver: Bytes! # address
  timestamp: BigInt! # uint256
  totalSupply: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterSet @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIPaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIRedemption @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SupplyCeilingSet @entity(immutable: true) {
  id: Bytes!
  supplyCeiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ToggledRestricted @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  isRestricted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ANFIUnpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CR5Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CR5Issuanced @entity(immutable: true) {
  id: Bytes!
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MessageSent @entity(immutable: true) {
  id: Bytes!
  messageId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CR5OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CR5Redemption @entity(immutable: true) {
  id: Bytes!
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CR5RequestIssuance @entity(immutable: true) {
  id: Bytes!
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CR5RequestRedemption @entity(immutable: true) {
  id: Bytes!
  messageId: Bytes! # bytes32
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type MAG7Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Issuanced @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Redemption @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RequestIssuance @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7RequestRedemption @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MAG7Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ARBEIChainlinkCancelled @entity(immutable: true) {
  id: Bytes!
  IndexFactory_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIChainlinkFulfilled @entity(immutable: true) {
  id: Bytes!
  IndexFactory_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIChainlinkRequested @entity(immutable: true) {
  id: Bytes!
  IndexFactory_id: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIFeeRateSet @entity(immutable: true) {
  id: Bytes!
  feeRatePerDayScaled: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIFeeReceiverSet @entity(immutable: true) {
  id: Bytes!
  feeReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIIssuanced @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  inputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMethodologistSet @entity(immutable: true) {
  id: Bytes!
  methodologist: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMethodologySet @entity(immutable: true) {
  id: Bytes!
  methodology: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMintFeeToReceiver @entity(immutable: true) {
  id: Bytes!
  feeReceiver: Bytes! # address
  timestamp: BigInt! # uint256
  totalSupply: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIMinterSet @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIRedemption @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  outputToken: Bytes! # address
  inputAmount: BigInt! # uint256
  outputAmount: BigInt! # uint256
  time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEISupplyCeilingSet @entity(immutable: true) {
  id: Bytes!
  supplyCeiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ARBEIToggledRestricted @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  isRestricted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
